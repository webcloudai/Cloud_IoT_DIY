from aws_cdk import (
    aws_lambda,
    aws_apigateway,
    aws_route53,
    aws_s3,
    aws_dynamodb,
    aws_iot,
    aws_certificatemanager,
    aws_logs,
    Duration, 
    RemovalPolicy,
    Stack,
    # aws_sqs as sqs,
)

#--------------------Some constants-----------------------------------------
is_dev_stack:bool = True    # this will be Almost always False unless time of active CDK development


#---------------------------------------------------------------------------
default_lambda_props = {
    # REQUIRED by CDK
    "code":aws_lambda.Code.from_inline('''
def handler(event, context, **kwargs):
    return { statusCode:200, body:"Empty Hello", isBase64Encoded:false }
    '''),                       # The source code of your Lambda function. You can point to a file in an Amazon Simple Storage Service (Amazon S3) bucket or specify your source code as inline text.
    "handler":"index.handler",  # The name of the method within your code that Lambda calls to execute your function. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime. For more information, see https://docs.aws.amazon.com/lambda/latest/dg/foundation-progmodel.html. Use ``Handler.FROM_IMAGE`` when defining a function from a Docker image. NOTE: If you specify your source code as inline text by specifying the ZipFile property within the Code property, specify index.function_name as the handler.
    "runtime":aws_lambda.Runtime.PYTHON_3_10,

    # TO BE PROVIDED when defining functions
    "architecture": aws_lambda.Architecture.ARM_64, # The system architectures compatible with this lambda function. Default: Architecture.X86_64
    "description": "BUG",
    "function_name": "BUG", # letters, numbers, hyphens, or underscores; up to 64 characters in length. Will be autogenerated if None. If you specify a name, you cannot perform SOME (VERY RARE) updates that require "Replacement" of this resource and maybe will have to change the function name. Details: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html
    "log_retention": aws_logs.RetentionDays.ONE_WEEK,
    "memory_size": 256,
    "timeout": Duration.seconds(29),
    "environment": {},      # Key-value pairs that Lambda caches and makes available for your Lambda functions. Use environment variables to apply configuration changes, such as test and production environment configurations, without changing your Lambda function source code. Default: - No environment variables.
    "layers": None,         # A list of layers to add to the function's execution environment. You can configure your Lambda function to pull in additional code during initialization in the form of layers. Layers are packages of libraries or other dependencies that can be used by multiple functions. Default: - No layers.
    "tracing": None,        # Enable AWS X-Ray Tracing for Lambda Function. Default: Tracing.Disabled

    # OPTIONAL
    "max_event_age": Duration.hours(6),     # The maximum age of a request that Lambda sends to a function for processing. Minimum: 60 seconds Maximum: 6 hours Default: Duration.hours(6)
    "on_failure": None,         # The destination for failed invocations. Default: - no destination
    "on_success": None,         # The destination for successful invocations. Default: - no destination
    "retry_attempts": 1,        # The maximum number of times to retry when the function returns an error. Minimum: 0 Maximum: 2 Default: 2
    "allow_all_outbound": None, # Whether to allow the Lambda to send all network traffic. If set to false, you must individually add traffic rules to allow the Lambda to connect to network targets. Default: true
    "allow_public_subnet": None,   # Lambda Functions in a public subnet can NOT access the internet. Use this property to acknowledge this limitation and still place the function in a public subnet. Default: false
    "code_signing_config": None,    # Code signing config associated with this function. Default: - Not Sign the Code
    "current_version_options": None,    # Options for the ``lambda.Version`` resource automatically created by the ``fn.currentVersion`` method. Default: - default options as described in ``VersionOptions``
    "dead_letter_queue": None,
    "dead_letter_queue_enabled": False,
    "dead_letter_topic": None,
    "environment_encryption": None, # The AWS KMS key that's used to encrypt your function's environment variables. Default: - AWS Lambda creates and uses an AWS managed customer master key (CMK).
    "ephemeral_storage_size": None, # The size of the functionâ€™s /tmp directory in MiB. Default: 512 MiB
    "events": None,         # Event sources for this function. You can also add event sources using ``addEventSource``. Default: - No event sources.
    "filesystem": None,     # The filesystem configuration for the lambda function. Default: - will not mount any filesystem
    "initial_policy": None, # Initial policy statements to add to the created Lambda Role. You can call ``addToRolePolicy`` to the created lambda to add statements post creation. Default: - No policy statements are added to the created Lambda role.
    "insights_version": None,   # Specify the version of CloudWatch Lambda insights to use for monitoring. Default: - No Lambda Insights
    "log_retention_retry_options": None,    # When log retention is specified, a custom resource attempts to create the CloudWatch log group. These options control the retry policy when interacting with CloudWatch APIs. Default: - Default AWS SDK retry options.
    "log_retention_role": None, # The IAM role for the Lambda function associated with the custom resource that sets the retention policy. Default: - A new role is created.
    "profiling": None,          # Enable profiling. Default: - No profiling.
    "profiling_group": None,    # Profiling Group. Default: - A new profiling group will be created if ``profiling`` is set.
    "reserved_concurrent_executions": None, # The maximum of concurrent executions you want to reserve for the function. Default: - No specific limit - account limit.
    "role": None,           # Lambda execution role. This is the role that will be assumed by the function upon execution. It controls the permissions that the function will have. The Role must be assumable by the 'lambda.amazonaws.com' service principal. The default Role automatically has permissions granted for Lambda execution. If you provide a Role, you must add the relevant AWS managed policies yourself. The relevant managed policies are "service-role/AWSLambdaBasicExecutionRole" and "service-role/AWSLambdaVPCAccessExecutionRole". Default: - A unique role will be generated for this lambda function. Both supplied and generated roles can always be changed by calling ``addToRolePolicy``.
    "security_groups": None,    # The list of security groups to associate with the Lambda's network interfaces. Only used if 'vpc' is supplied. Default: - If the function is placed within a VPC and a security group is not specified, either by this or securityGroup prop, a dedicated security group will be created for this function.
    "vpc": None,            # VPC network to place Lambda network interfaces. Specify this if the Lambda function needs to access resources in a VPC. This is required when ``vpcSubnets`` is specified. Default: - Function is not placed within a VPC.
    "vpc_subnets": None     # Where to place the network interfaces within the VPC. This requires ``vpc`` to be specified in order for interfaces to actually be placed in the subnets. If ``vpc`` is not specify, this will raise an error. Note: Internet access for Lambda Functions requires a NAT Gateway, so picking public subnets is not allowed (unless ``allowPublicSubnet`` is set to ``true``). Default: - the Vpc default strategy if not specified
}


default_s3bucket_props = {
    "bucket_name": "BUG",          #!!!!!!!!! This property will be different for different Buckets
    "lifecycle_rules": None,    #!!!!!!!!! This property will be different for different Buckets
    "access_control": aws_s3.BucketAccessControl.BUCKET_OWNER_FULL_CONTROL,
    # *Objects in the Bucket will NOT be deleted when stack destroyed unless development stage
    "auto_delete_objects": is_dev_stack,    
    # *The bucket will be orphaned when stack destroyed unless development stage
    "removal_policy": RemovalPolicy.DESTROY if is_dev_stack else RemovalPolicy.RETAIN,
    "block_public_access": aws_s3.BlockPublicAccess.BLOCK_ALL,
    "bucket_key_enabled": False,
    "encryption": aws_s3.BucketEncryption.S3_MANAGED,
    "encryption_key": None,
    "enforce_ssl": True,            # *Based on security recommendations
    "event_bridge_enabled": False,
    "intelligent_tiering_configurations": None,
    "inventories": None,
    "metrics": None,
    "notifications_handler_role": None,    # new Role will be created
    "object_ownership": None,
    "public_read_access": False,
    "server_access_logs_bucket": None,
    "transfer_acceleration": False,
    # below are website-hosted in S3 properties
    "cors": None,
    "website_error_document": None,
    "website_index_document": None,
    "website_redirect": None,
    "website_routing_rules": None
}

