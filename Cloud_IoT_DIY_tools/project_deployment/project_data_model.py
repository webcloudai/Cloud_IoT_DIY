'''
Â© 2022 Daniil Sokolov (daniil.sokolov@webcloudai.com)
MIT License
'''
from __future__ import annotations
from typing import Dict, List, Callable
from uuid import uuid4
from pathlib import Path
import json
# import shutil
from uuid import uuid4
import logging
_top_logger = logging.getLogger(__name__)

#--- Proprietary modules
from cloud_client import AwsCloudClient, CloudClient
from process_ui.data_model import StepState, DataModel
from process_ui.process_navigator import ProcessNavigator, StepController
from project_deployment.steps import Step

####################################################################
#* Application Data Model
class AppDataModel(DataModel):
    def __init__(self, **kwargs) -> None:
        super().__init__(**kwargs)
        # for k,v in kwargs.items():
        #     setattr(self, k, v)
        self.data:Dict = {}
        #--------- Project config file location
        self._app_config_path:Path = Path("../project_config.json")
        #--------- Project CDK deployment output location
        self._cdk_deploy_output_path:Path = Path("../cdk_deployment_output.json")
        #--------- Project .gitignore location
        self.gitignore_path = Path("../.gitignore")
        #--------- Project very sensitive MyThings folder location
        self._my_things_path:Path = Path("../_MyThings")
        #--------- Project very sensitive MyThings folder location
        self._website_path:Path = Path("../Cloud_IoT_DIT_website")
        self._website_deployment_path = self._website_path / "build" / "web"

        #--------- Make some parameters available for Base Class users
        self.instance_config.setdefault("_cdk_deploy_output_path", self._cdk_deploy_output_path)

    def save_config_to(self, config_location:Path=None)->Path:
        cclient:CloudClient = self.instance_config["cloud_client"]
        dest = config_location or self._app_config_path
        # save current config as version with prev suffix
        dest_bckp = dest.with_stem(f"{dest.stem}.{uuid4()}")
        # dest_bckp = dest.parent / f"{dest.stem}.{uuid4()}{dest.suffix}"
        try:
            dest.rename(dest_bckp)
        except Exception as e:
            _top_logger.warning(f"Fail to backup config before the update with exception {e}")
        # update config
        with open(dest, "w") as f:
            json.dump(
                {
                    **self.data["config"],
                    **{
                        "Local_Locations": {
                            **self.data["config"].get("Local_Locations", {}),
                            **{
                                "my_things": str(self._my_things_path.resolve()),
                                "web_site": str(self._website_path.resolve()),
                                "web_site_depl": str(self._website_deployment_path.resolve())
                            }
                        },
                        "Cloud_Deployment_ENV": {
                            **self.data["config"].get("Cloud_Deployment_ENV", {}),
                            **{
                                "depl_account": cclient.account_id,
                                "depl_region": cclient.region,
                                "profile": cclient.profile_name
                            }
                        }
                    }
                },
                f,indent=3)
        return dest

    def update_gitignore(self, location:Path=None):
        self.gitignore_path = location or self.gitignore_path
        with open(self.gitignore_path, "r") as f:
            content = f.readlines()
        add_proj_config:dict = {
            self._app_config_path.name: "",
            self._cdk_deploy_output_path.name: "",
            self._my_things_path.name: ""
        }
        for line in content:
            for k in list(add_proj_config.keys()):
                if line.strip().startswith(k):
                    add_proj_config.pop(k, None)
                    break
        if len(add_proj_config)>0:
            content.append("\n\n# AUTOGENERATED by Project Provisioning Tool")
            for k,v in add_proj_config.items():
                content.append(f"\n{k}")
        with open(self.gitignore_path, "w") as f:
            f.writelines(content)
        
    #----------------------------------------------
    # parent @abstractmethod methods implementation
    def update_local_file(self, **kwargs):
        if kwargs.get("type",None)=="gitignore":
            self.update_gitignore(location=kwargs.get("location",None))

    def load_config_from(self, config_location:Path=None)->Dict:
        self._app_config_path = config_location or self._app_config_path
        with open(self._app_config_path, "r") as f:
            self.data["config"] = json.load(f)
        return self.data

    def config_data(self)->Dict:
        self.data.setdefault("config",{})
        return self.data["config"]

    def to_dict(self) -> Dict:
        return self.data

    def load_model_data(self):
        ''' '''
        return self.load_config_from()

    def save_model_data(self):
        ''' '''
        return self.save_config_to()

    def update_by_parameter_route(self, route:List[str], value:any, data_section:str="config"):
        ''' '''
        dest = self.data[data_section]
        for key in route[:-1]:
            dest = dest[key]
        dest[route[-1]] = value


